generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                    @id @default(uuid())
  firstName      String                    @default("")
  lastName       String
  email          String                    @unique
  role           Role                      @default(USER)
  password       String
  createDate     DateTime                  @default(now())
  lastOnline     DateTime?
  writtenPosts   Post[]                    @relation("Written posts")
  comments       Comment[]
  likedPosts     UsersJoinLikedPosts[]
  likedComments  UsersJoinLikedComments[]
  browserHistory UsersJoinBrowserHistory[]

  @@index([email])
}

model Post {
  id             String                    @id @default(uuid())
  title          String
  article        String
  createDate     DateTime                  @default(now())
  author         User                      @relation("Written posts", fields: [authorId], references: [id])
  authorId       String
  likesAmount    Int                       @default(0)
  likedBy        UsersJoinLikedPosts[]
  commentsAmount Int                       @default(0)
  comments       Comment[]
  browserHistory UsersJoinBrowserHistory[]
}

model UsersJoinLikedPosts {
  postId     String
  userId     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
  assignedAt DateTime @default(now())

  @@id([postId, userId])
}

model Comment {
  id          String                   @id @default(uuid())
  text        String
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  postId      String
  likesAmount Int                      @default(0)
  post        Post                     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likedBy     UsersJoinLikedComments[]
  createDate  DateTime                 @default(now())
}

model UsersJoinLikedComments {
  commentId  String
  userId     String
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([commentId, userId])
}

model UsersJoinBrowserHistory {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  assignedAt DateTime @default(now())

  @@id([userId, postId])
}

enum Role {
  USER
  ADMIN
  TESTER
}
